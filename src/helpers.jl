using QuadGK: quadgk
using Distributions: Normal
using LinearAlgebra: I, ‚ÑØ
using ControlSystemsBase: ss, lqr, Continuous, Discrete, StateSpace

"""
	int_expAs_B(A, B, lo, hi)

Compute ``\\int_{\\text{lo}}^{\\text{hi}} e^{As} \\cdot B \\, ds``.
"""
function int_expAs_B(A::AbstractMatrix, B::AbstractMatrix, lo::Float64, hi::Float64)
  integrand = s -> exp(A * s) * B
  result, _ = quadgk(integrand, lo, hi)
  return result
end

"""
	normal_sample(œÉ, Œº)

Returns `Œª`, where ``Œª \\sim ùí©(Œº, œÉ^2)``.

Also note that, ``Œª \\in [-1, 1]``.
"""
function normal_sample(œÉ::Float64, Œº::Float64)
  ùí© = Normal(Œº, œÉ)
  Œª = clamp(rand(ùí©), -1, 1)
  return Œª
end

"""
	simulate(sys, K, H, x‚ÇÄ)

Return `x, u`, where ``x[k+1] = sys.A \\cdot x[k] + sys.B \\cdot u[k]`` and ``u[k+1] = K \\cdot x[k+1]`` for `H` steps.

Also note that, ``x[0] = x‚ÇÄ``.
"""
function simulate(sys::StateSpace, K::AbstractMatrix, H::Integer, x‚ÇÄ::Vector{Float64})
  x = Vector{typeof(x‚ÇÄ)}(undef, H + 1)
  u = Vector{Vector{Float64}}(undef, H)

  x[1] = x‚ÇÄ
  for k in 1:H
    u[k] = K * x[k]
    x[k+1] = sys.A * x[k] + sys.B * u[k]
  end

  return x, u
end

"""
	synthesize(sys, h)

Synthesize discrete-time state space model `sys_` and corresponding controller `K` for conntinuous-time state space model `sys`,
for sampling period `h`.
"""
function synthesize(sys::StateSpace{Continuous}, h::Float64)
  sys_ = let
    œï = ‚ÑØ^(h * sys.A)
    Œì = int_expAs_B(sys.A, sys.B, 0.0, h)
    ss(œï, Œì, sys.C, sys.D, h)
  end
  K = lqr(Discrete, sys_.A, sys_.B, I, I)
  return sys_, K
end

"""
	synthesize(sys, h)

Synthesize discrete-time state space model `sys_` and corresponding controller `K` for conntinuous-time state space model `sys`,
for sampling period `h` and input-delay `Dc`.
"""
function synthesize(sys::StateSpace{Continuous}, h::Float64, Dc::Float64)
  sys_ = let
    œï = ‚ÑØ^(h * sys.A)
    Œì‚ÇÄ = int_expAs_B(sys.A, sys.B, 0.0, h - Dc)
    Œì‚ÇÅ = int_expAs_B(sys.A, sys.B, h - Dc, h)
    œï_aug = [œï Œì‚ÇÅ; 0 0 0]
    Œì_aug = [Œì‚ÇÄ; I]
    C_aug = [sys.C 0]
    D_aug = sys.D
    ss(œï_aug, Œì_aug, C_aug, D_aug, h)
  end
  K = lqr(Discrete, sys_.A, sys_.B, I, I)
  return sys_, K
end

"""
	synthesize(sys, h)

Synthesize discrete-time state space model `sys_` and corresponding controller `K` for conntinuous-time state space model `sys`,
for sampling period `h` and input-delays `Dc‚ÇÅ` and `Dc‚ÇÇ`.
"""
function synthesize(sys::StateSpace{Continuous}, h::Float64, Dc‚ÇÅ::Float64, Dc‚ÇÇ::Float64)
  sys_ = let
    œï = ‚ÑØ^(h * sys.A)
    Œì‚ÇÇ = int_expAs_B(sys.A, sys.B, 0.0, h - Dc‚ÇÇ)
    Œì‚ÇÅ = int_expAs_B(sys.A, sys.B, 0.0, Dc‚ÇÇ - Dc‚ÇÅ)
    Œì‚ÇÉ = int_expAs_B(sys.A, sys.B, h - Dc‚ÇÇ, h - Dc‚ÇÇ + Dc‚ÇÅ)
    œï_aug = [œï Œì‚ÇÉ; 0 0 0]
    Œì_aug = [Œì‚ÇÅ Œì‚ÇÇ; 0 I]
    C_aug = [sys.C 0]
    D_aug = [sys.D 0]
    ss(œï_aug, Œì_aug, C_aug, D_aug, h)
  end
  K = lqr(Discrete, sys_.A, sys_.B, I, I)
  return sys_, K
end

"""
	K_uncertain(K)

Dummy function overload to satisfy kwargs overload in trajectories().
"""
function K_uncertain(K::AbstractMatrix)
  return K
end

"""
	K_uncertain(K, œÉ, Œº)

Compute `K'` such that ``u[k+1] = K' \\cdot x[k+1]`` is deviated by `œÉ` centered around `Œº`.
"""
function K_uncertain(K::AbstractMatrix, œÉ::Float64, Œº::Float64)
  Œª = [normal_sample(œÉ, Œº) for _ in 1:size(K, 2)-1]
  K_ = [reshape(vcat(K[1, 1:end-1] .* (1 .+ Œª), K[1, end]), 1, size(K, 2))]
  return K_
end

"""
	K_uncertain(K, œÉ‚ÇÅ, œÉ‚ÇÇ, Œº)

Compute `K'` such that ``u[k+1] = K' \\cdot x[k+1]`` is deviated by `œÉ‚ÇÅ, œÉ‚ÇÇ` centered around `Œº`.
"""
function K_uncertain(K::AbstractMatrix, œÉ‚ÇÅ::Float64, œÉ‚ÇÇ::Float64, Œº::Float64)
  Œª‚ÇÅ = [normal_sample(œÉ‚ÇÅ, Œº) for _ in 1:size(K, 2)-1]
  Œª‚ÇÇ = [normal_sample(œÉ‚ÇÇ, Œº) for _ in 1:size(K, 2)-1]
  K_ = [reshape(vcat(K[1, 1:end-1] .* (1 .+ Œª‚ÇÅ), K[1, end]), 1, size(K, 2)); reshape(vcat(K[2, 1:end-1] .* (1 .+ Œª‚ÇÇ), K[2, end]), 1, size(K, 2))]
  return K_
end
